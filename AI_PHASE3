AI _PHASE  3

DATASET: spam.csv

CODE:

import numpy as np

import pandas as pd

from sklearn.feature_extraction.text import TfidfVectorizer

from sklearn.model_selection import train_test_split

from sklearn.naive_bayes import MultinomialNB

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

import nltk

from nltk.corpus import stopwords

from nltk.tokenize import word_tokenize



nltk.download('stopwords')

nltk.download('punkt')



def load_data(file_path):

    data = pd.read_csv(file_path)

    X = data['text']

    y = data['label']

    return X, y



def preprocess_text(text):

    words = word_tokenize(text)

    words = [word.lower() for word in words]

    stop_words = set(stopwords.words('english'))

    words = [word for word in words if word not in stop_words]

    cleaned_text = ' '.join(words)

    return cleaned_text



def create_features(X_train, X_test):

    vectorizer = TfidfVectorizer()

    X_train = vectorizer.fit_transform(X_train)

    X_test = vectorizer.transform(X_test)

    return X_train, X_test



def train_classifier(X_train, y_train):

    classifier = MultinomialNB()

    classifier.fit(X_train, y_train)

    return classifier



def evaluate_classifier(classifier, X_test, y_test):

    y_pred = classifier.predict(X_test)

    accuracy = accuracy_score(y_test, y_pred)

    confusion = confusion_matrix(y_test, y_pred)

    report = classification_report(y_test, y_pred)

    return accuracy, confusion, report



def main():

    file_path = 'spam.csv'

    X, y = load_data(file_path)

    X = [preprocess_text(text) for text in X]

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    X_train, X_test = create_features(X_train, X_test)

    classifier = train_classifier(X_train, y_train)

    accuracy, confusion, report = evaluate_classifier(classifier, X_test, y_test)

    print("Accuracy:", accuracy)

    print("Confusion Matrix:\n", confusion)

    print("Classification Report:\n", report)



if __name__ == "__main__":

    main()
